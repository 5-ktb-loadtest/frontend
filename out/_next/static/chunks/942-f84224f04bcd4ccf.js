(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[942], { 83867: (e, t, r) => { "use strict"; r.d(t, { Q: () => s, v: () => c }); var o = r(85893), i = r(67294), l = r(11163), a = r(31530), n = r(19182); let s = e => { let t = t => { let r = (0, l.useRouter)(), [a, s] = (0, i.useState)(!0); return ((0, i.useEffect)(() => { n.Z.getCurrentUser() ? s(!1) : r.replace("/?redirect=" + r.asPath) }, [r]), a) ? null : (0, o.jsx)(e, { ...t }) }, r = e.displayName || e.name || "Component"; return t.displayName = "WithAuth(".concat(r, ")"), t }, c = e => { let t = t => { let r = (0, l.useRouter)(), [s, c] = (0, i.useState)(!0); return ((0, i.useEffect)(() => { (async () => { r.isReady && (n.Z.getCurrentUser() && "/" === r.pathname ? await r.replace("/chat-rooms") : c(!1)) })() }, [r, r.isReady]), s) ? (0, o.jsx)("div", { style: { display: "flex", alignItems: "center", justifyContent: "center", height: "100vh", backgroundColor: "var(--vapor-color-background)", color: "var(--vapor-color-text-primary)" }, children: (0, o.jsx)(a.x, { typography: "body1", children: "Loading..." }) }) : (0, o.jsx)(e, { ...t }) }, r = e.displayName || e.name || "Component"; return t.displayName = "WithoutAuth(".concat(r, ")"), t } }, 86727: (e, t, r) => { "use strict"; r.d(t, { Z: () => d }); var o = r(19182), i = r(98690), l = r.n(i), a = r(83454); class n { initializeS3() { l().config.update({ accessKeyId: "KEYKEY", secretAccessKey: "KEYKEYKEY", region: this.region }), this.s3 = new (l()).S3({ apiVersion: "2006-03-01", signatureVersion: "v4" }) } async uploadFile(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "uploads", r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; if (!e) throw Error("업로드할 파일이 없습니다."); this.validateFile(e); let o = this.generateUniqueFileName(e.name), i = "".concat(t, "/").concat(o), l = { Bucket: this.bucketName, Key: i, Body: e, ContentType: e.type, Metadata: { originalName: e.name, uploadDate: new Date().toISOString() } }; try { if (r) return this.uploadWithProgress(l, r); return (await this.s3.upload(l).promise()).Location } catch (e) { throw console.error("S3 upload error:", e), Error("파일 업로드 실패: ".concat(e.message)) } } async uploadWithProgress(e, t) { return new Promise((r, o) => { let i = this.s3.upload(e); i.on("httpUploadProgress", e => { t(Math.round(e.loaded / e.total * 100)) }), i.send((e, t) => { e ? o(Error("파일 업로드 실패: ".concat(e.message))) : r(t.Location) }) }) } async uploadMultipleFiles(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "uploads", r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; if (!e || 0 === e.length) throw Error("업로드할 파일이 없습니다."); let o = e.map((o, i) => this.uploadFile(o, t, t => { r && r(Math.round((100 * i + t) / e.length)) })); try { return await Promise.all(o) } catch (e) { throw console.error("Multiple files upload error:", e), Error("파일 업로드 실패: ".concat(e.message)) } } async deleteFile(e) { try { let t = this.extractKeyFromUrl(e), r = { Bucket: this.bucketName, Key: t }; return await this.s3.deleteObject(r).promise(), !0 } catch (e) { throw console.error("S3 delete error:", e), Error("파일 삭제 실패: ".concat(e.message)) } } validateFile(e) { if (e.size > 0xa00000) throw Error("파일 크기는 10MB를 초과할 수 없습니다."); if (!["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp", "video/mp4", "video/webm", "audio/mp3", "audio/wav", "application/pdf"].includes(e.type)) throw Error("지원하지 않는 파일 형식입니다.") } generateUniqueFileName(e) { let t = Date.now(), r = Math.random().toString(36).substring(2, 15), o = e.split(".").pop(); return "".concat(t, "-").concat(r, ".").concat(o) } extractKeyFromUrl(e) { let t = "https://".concat(this.bucketName, ".s3.").concat(this.region, ".amazonaws.com/"); return e.replace(t, "") } getPresignedUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3600, r = { Bucket: this.bucketName, Key: e, Expires: t }; return this.s3.getSignedUrl("getObject", r) } getResizedImageUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { width: r, height: o, quality: i = 80 } = t; if (a.env.NEXT_PUBLIC_CLOUDFRONT_DOMAIN) { let t = this.extractKeyFromUrl(e), l = []; r && l.push("w_".concat(r)), o && l.push("h_".concat(o)), 80 !== i && l.push("q_".concat(i)); let n = l.length > 0 ? "/".concat(l.join(",")) : ""; return "https://".concat(a.env.NEXT_PUBLIC_CLOUDFRONT_DOMAIN).concat(n, "/").concat(t) } return e } constructor() { this.s3 = null, this.bucketName = "ktb-stress-test-5", this.region = "ap-northeast-2", this.initializeS3() } } let s = new n; var c = r(83454); class u { _buildFilePath(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; if (e && "object" == typeof e) { if (e.folder && e.filename) return "".concat(e.folder, "/").concat(e.filename); if (e.filename && t) return "chat-files/".concat(t, "/").concat(e.filename); if (e.filename) return e.filename } return "string" == typeof e ? e.includes("/") ? e : t ? "chat-files/".concat(t, "/").concat(e) : e : (console.warn("_buildFilePath: Invalid fileInfo", e), "") } _buildAuthenticatedUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { download: r = !1, includeAuth: i = !0, baseUrl: l = null, forceDownload: a = !1 } = t, n = l || this.bucketUrl || "".concat(this.apiUrl, "/uploads"), s = "".concat(n, "/").concat(e); if (i) { let e = o.Z.getCurrentUser(); if ((null == e ? void 0 : e.token) && (null == e ? void 0 : e.sessionId)) { let t = new URLSearchParams({ token: e.token, sessionId: e.sessionId }); (r || a) && t.set("download", "true"), a && t.set("attachment", "true"), s += "?".concat(t.toString()) } } return s } getThumbnailUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; "boolean" == typeof t && (t = { preview: t }); let o = { preview: !0, width: 150, height: 150, quality: 80, includeAuth: !0, ...t }, i = this._buildFilePath(e, r); if (!i) return console.warn("getThumbnailUrl: Could not build file path", e), ""; console.debug("getThumbnailUrl:", { fileInfo: e, roomId: r, filePath: i, options: o }); let l = this._buildAuthenticatedUrl(i, { includeAuth: o.includeAuth }); if (!this.isImageUrl(i)) return l; try { if (s.getResizedImageUrl && !o.preview) return s.getResizedImageUrl(l, { width: o.width, height: o.height, quality: o.quality }); return l } catch (e) { return console.warn("getThumbnailUrl error:", e), l } } getFileUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = { download: !1, includeAuth: !0, ...t }, i = this._buildFilePath(e, r); return i ? (console.debug("getFileUrl:", { fileInfo: e, roomId: r, filePath: i, options: o }), this._buildAuthenticatedUrl(i, o)) : (console.warn("getFileUrl: Could not build file path", e), "") } getDownloadUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; return this.getFileUrl(e, { download: !0, includeAuth: !0, forceDownload: !0 }, t) } getPreviewUrl(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; return this.getFileUrl(e, { download: !1 }, t) } async validateFile(e) { if (!e) throw Error("파일이 선택되지 않았습니다."); if (e.size > this.maxFileSize) throw Error("파일 크기는 ".concat(this.formatFileSize(this.maxFileSize), "를 초과할 수 없습니다.")); if (![...this.allowedImageTypes, ...this.allowedVideoTypes, ...this.allowedAudioTypes, ...this.allowedDocumentTypes].includes(e.type)) throw Error("지원하지 않는 파일 형식입니다."); return !0 } async uploadFile(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "uploads", r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; try { await this.validateFile(e), console.log("Uploading file to S3: ".concat(e.name, " (").concat(this.formatFileSize(e.size), ")")); let o = await s.uploadFile(e, t, r), i = { success: !0, url: o, originalName: e.name, size: e.size, type: e.type, folder: t, uploadedAt: new Date().toISOString() }; return console.log("File uploaded successfully:", i), i } catch (e) { throw console.error("File upload error:", e), Error(e.message || "파일 업로드에 실패했습니다.") } } async uploadChatFile(e, t) { let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; try { let o = await this.uploadFile(e, "chat-files/".concat(t), r); return o.chatRoomId = t, o.isChatFile = !0, o } catch (e) { throw console.error("Chat file upload error:", e), e } } formatFileSize(e) { if (0 === e) return "0 Bytes"; let t = Math.floor(Math.log(e) / Math.log(1024)); return parseFloat((e / Math.pow(1024, t)).toFixed(2)) + " " + ["Bytes", "KB", "MB", "GB"][t] } getFileCategory(e) { return this.allowedImageTypes.includes(e) ? "image" : this.allowedVideoTypes.includes(e) ? "video" : this.allowedAudioTypes.includes(e) ? "audio" : this.allowedDocumentTypes.includes(e) ? "document" : "unknown" } isImageUrl(e) { if (!e || "string" != typeof e) return !1; try { let t = e.toLowerCase(); return [".jpg", ".jpeg", ".png", ".gif", ".webp"].some(e => t.includes(e)) } catch (t) { return console.warn("isImageUrl error:", t, "url:", e), !1 } } createPreviewUrl(e) { if (!e || "object" != typeof e || !e.type || !e.type.startsWith("image/")) return null; try { return URL.createObjectURL(e) } catch (t) { return console.warn("createPreviewUrl error:", t, "file:", e), null } } revokePreviewUrl(e) { if (e && "string" == typeof e && e.startsWith("blob:")) try { URL.revokeObjectURL(e) } catch (t) { console.warn("revokePreviewUrl error:", t, "url:", e) } } constructor() { this.maxFileSize = 0xa00000, this.allowedImageTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"], this.allowedVideoTypes = ["video/mp4", "video/webm", "video/avi", "video/mov"], this.allowedAudioTypes = ["audio/mp3", "audio/wav", "audio/aac", "audio/ogg"], this.allowedDocumentTypes = ["application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"], this.bucketUrl = c.env.NEXT_PUBLIC_S3_BUCKET_URL || "https://".concat("ktb-stress-test-5", ".s3.").concat("ap-northeast-2", ".amazonaws.com"), this.apiUrl = "http://34.64.60.60:5000" } } let d = new u }, 6969: (e, t, r) => { "use strict"; r.d(t, { FV: () => n, eK: () => a, hA: () => c, pJ: () => s }); let o = new Map, i = { wayneAI: { backgroundColor: "#0084ff", color: "#FFFFFF" }, consultingAI: { backgroundColor: "#00C853", color: "#FFFFFF" } }, l = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEEAD", "#D4A5A5", "#9B5DE5", "#F15BB5", "#00BBF9", "#00F5D4", "#738276", "#A6D8D4"], a = e => { if (!e) return i.wayneAI; let t = e.toLowerCase(); return "wayneai" === t ? i.wayneAI : "consultingai" === t ? i.consultingAI : i.wayneAI }, n = e => { if (!e) return "#0084ff"; if (o.has(e)) return o.get(e); if (e.endsWith("@wayne.ai")) return o.set(e, i.wayneAI.backgroundColor), i.wayneAI.backgroundColor; if (e.endsWith("@consulting.ai")) return o.set(e, i.consultingAI.backgroundColor), i.consultingAI.backgroundColor; let t = 0; for (let r = 0; r < e.length; r++)t = (t << 5) - t + e.charCodeAt(r), t &= t; let r = l[Math.abs(t) % l.length]; return o.set(e, r), r }, s = e => { if (!e) return "#000000"; let t = parseInt(e.slice(1, 3), 16); return (299 * t + 587 * parseInt(e.slice(3, 5), 16) + 114 * parseInt(e.slice(5, 7), 16)) / 1e3 >= 128 ? "#000000" : "#FFFFFF" }, c = e => { if (!e) return {}; let t = n(e), r = s(t); return { backgroundColor: t, color: r } } }, 28022: () => { } }]);